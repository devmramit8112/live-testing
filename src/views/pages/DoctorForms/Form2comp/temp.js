import React, { useState, useEffect } from 'react' import PoliceStationSelectRukka from './PoliceStationSelectRukka' import Newcomprukka, { Reporting, ReportingPolice, SubsequentOpinionaa } from './comp/Newcomprukka'; import RukkaGenPatient from './RukkaGenPatient'; import axios from 'axios'; import { HomeButton, Redstar, Ageinput } from '../DoctorForms/common/Operationradionbutton'; const Rukka = () => { // const [FirstAssessment, setFirstAssessment] = useState(false); const [SubsequentOpinion, setSubsequentOpinion] = useState(false); const [DetailirstAssessment, setDetailirstAssessment] = useState(false); const [DetailSubsequentOpinion, setDetailSubsequentOpinion] = useState(false); const [selectedTrn, setSelectedTrn] = useState(''); const [patientData, setPatientData] = useState({}); const [trn, setTrn] = useState(''); // Define trn as a state variable // all api is here const apiPrefix = process.env.REACT_APP_API_PREFIX const addrukkaapi = `${apiPrefix}/user/rukka/add_rukka` // post request for add rukka details const [state1, setState1] = useState({ selectedStateCode: '', selectedDistrictCode: '', selectedPoliceStation: '', }); const [state2, setState2] = useState({ selectedStateCode: '', selectedDistrictCode: '', selectedPoliceStation: '', }); const [state3, setState3] = useState({ selectedStateCode: '', selectedDistrictCode: '', selectedPoliceStation: '', }); const [dropdownData, setDropdownData] = useState([]); const [selectedFlag, setSelectedFlag] = useState('A'); // Default flag 'A' const enterby = localStorage.getItem('username'); const token = localStorage.getItem('token'); const [formData, setFormData] = useState({ // Initialize user input fields with empty values // vtname: '', // relation: '', // address:'', // phone:'', // post api victimid: '', caseid: '', vt_datearrival: '', vtname: '', vtgenderid: '', fathername: '', vt_phonenumber: '', vtageyr: '', vtagemonth: '', vtagedays: '', vtaddress: '', vt_psother: '', rukkaid: '', vtdob: '', //Reporting Police Station CCTNS // police_cctns_state: '', // police_cctns_district: '', // police_cctns_policestation: '', //Person Accompanying vtpersonacc: '', vtpersonacc_address: '', vtphonenuber_person: '', // state vt_scode_person: '', vt_dcode_person: '', vt_pscode_person: '', vt_psother_person: '', //Incident Deatils incident_details: '', incident_site: '', conditionofpatient: '', health_institute_id: '', //state // statecode: '', // dcode: '', // PSCODE: '', }); const [errors, setErrors] = useState({ vtpersonacc: '', relation: '', vtpersonacc_address: '', vtphonenuber_person: '', incident_details: '', incident_site: '', conditionofpatient: '', vt_scode_person: '', vt_dcode_person: '', vt_pscode_person: '', // statecode: '', // dcode: '', // PSCODE: '', }) const valdaitonReporting = () => { let valid = true; const newErrors = { vtpersonacc: '', relation: '', vtpersonacc_address: '', vtphonenuber_person: '', //Reportingpolice incident_details: '', incident_site: '', conditionofpatient: '', // statecode: '', // dcode: '', // PSCODE: '', }; if (!formData.vtpersonacc || formData.vtpersonacc.trim() === '') { newErrors.vtpersonacc = 'This is required'; valid = false; } if (!formData.relation || formData.relation.trim() === '') { newErrors.relation = 'This is required'; valid = false; } if (!formData.vtpersonacc_address || formData.vtpersonacc_address.trim() === '') { newErrors.vtpersonacc_address = 'This is required'; valid = false; } if (!formData.vtphonenuber_person || formData.vtphonenuber_person.trim() === '') { newErrors.vtphonenuber_person = 'This is required'; valid = false; } if (!formData.incident_details || formData.incident_details.trim() === '') { newErrors.incident_details = 'This is required'; valid = false; } if (!formData.incident_site || formData.incident_site.trim() === '') { newErrors.incident_site = 'This is required'; valid = false; } if (!formData.conditionofpatient || formData.conditionofpatient.trim() === '') { newErrors.conditionofpatient = 'This is required'; valid = false; } // if (!formData.statecode || formData.statecode.trim() === '') { // newErrors.statecode = 'State is required'; // valid = false; // } // if (!formData.dcode || formData.dcode.trim() === '') { // newErrors.dcode = 'District is required'; // valid = false; // } // if (!formData.PSCODE || formData.PSCODE.trim() === '') { // newErrors.PSCODE = 'Police Station is required'; // valid = false; // } setErrors(newErrors); return valid; }; // Define the query parameters const paramsData = new URLSearchParams(); paramsData.append('transactionid', ''); paramsData.append('name', ''); paramsData.append('fromdate', ''); paramsData.append('todate', ''); paramsData.append('flag', selectedFlag); paramsData.append('createuser', enterby); useEffect(() => { // Construct the API URL with query parameters const apiUrl = `${apiPrefix}/user/rukka/get_transactionidforrukka?${paramsData.toString()}`; // get data by params const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${token}`, }; fetch(apiUrl, { method: 'GET', headers: headers, }) .then(response => response.json()) .then(data => { const transactionIds = data.map(item => item.transactionid); setDropdownData(transactionIds); }) .catch(error => console.error(error)); }, [selectedFlag]); // Add selectedFlag as a dependency const fetchPatientData = (trn) => { // Construct the API URL with the selected trn console.log(trn) const apigetbytrn = `${apiPrefix}/user/rukka/get_patient_basic_details/${trn}`; // get list by trn const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${token}`, }; fetch(apigetbytrn, { method: 'GET', headers: headers, }) .then(response => response.json()) .then(data => { setPatientData(data); // Initialize user input fields with data from the database setFormData({ patientName: data.victimid || '', patientAge: data.caseid || '', // Add more fields as needed }); }) .catch(error => console.error(error)); setTrn(trn); // Set the trn state }; const handleDropdownChange = (e) => { const selectedOption = e.target.value; setSelectedTrn(selectedOption); fetchPatientData(selectedOption); }; const handleFlagChange = (e) => { const selectedFlagValue = e.target.value; setSelectedFlag(selectedFlagValue); }; const handleInputChange = (e) => { const { name, value } = e.target; setFormData({ ...formData, [name]: value, }); }; const handleStateChange1 = (scode) => { setState1((prevState) => ({ ...prevState, selectedStateCode: scode, })); }; const handleDistrictCodeChange1 = (dcode) => { setState1((prevState) => ({ ...prevState, selectedDistrictCode: dcode, })); }; const handlePoliceChange1 = (pscode) => { setState1((prevState) => ({ ...prevState, selectedPoliceStation: pscode, })); }; const handleStateChange2 = (scode) => { setState2((prevState) => ({ ...prevState, selectedStateCode: scode, })); }; const handleDistrictCodeChange2 = (dcode) => { setState2((prevState) => ({ ...prevState, selectedDistrictCode: dcode, })); }; const handlePoliceChange2 = (pscode) => { setState2((prevState) => ({ ...prevState, selectedPoliceStation: pscode, })); }; const handleStateChange3 = (scode) => { setState3((prevState) => ({ ...prevState, selectedStateCode: scode, })); }; const handleDistrictCodeChange3 = (dcode) => { setState3((prevState) => ({ ...prevState, selectedDistrictCode: dcode, })); }; const handlePoliceChange3 = (pscode) => { setState3((prevState) => ({ ...prevState, selectedPoliceStation: pscode, })); }; const handleSubmit = async () => { console.log(' Data:', formData) if (valdaitonReporting()) { try { const config = { headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}`, }, } const postData = { assessment_opinion_flag: selectedFlag, vt_scode: state1.selectedStateCode, vt_dCode: state1.selectedDistrictCode, vt_pscode: state1.selectedPoliceStation, vt_scode_person: state3.selectedStateCode, vt_dcode_person: state3.selectedDistrictCode, vt_pscode_person: state3.selectedPoliceStation, police_cctns_state: state2.selectedStateCode, police_cctns_district: state2.selectedDistrictCode, police_cctns_policestation: state2.selectedPoliceStation, createuser: enterby, // Use patientData received from RukkaGenPatient caseid: patientData.caseid, victimid: patientData.victimid, vt_datearrival: patientData.vt_datearrival, vtname: patientData.vtname, vtgenderid: patientData.vtgenderid, fathername: patientData.fathername, vt_phonenumber: patientData.vt_phonenumber, vtaddress: patientData.vtaddress, ...formData, // ... (other fields), }; const response = await axios.post(addrukkaapi, postData, config) if (response.status === 200) { // Handle success or any other logic here console.log(' API Response:', response.data) // Redirect or navigate to the next page if needed } else { // Handle non-200 responses here console.error(' API Error:', response.status) } } catch (error) { // Handle errors console.error('Error:', error) } } } // API GET FOR PDF GENERATE ************** const generatePdfReport = async () => { try { const apipdfgentrn = `${apiPrefix}/user/pdfgenrator/rukka/${trn}`; // pdf generator api alert("PDF REPORT", trn) const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${token}`, }; const response = await axios.get(apipdfgentrn, { headers, responseType: 'blob' }); if (response.status === 200) { const blob = new Blob([response.data], { type: 'application/pdf' }); const url = window.URL.createObjectURL(blob); window.open(url); } else { console.error('API Error:', response.status); } } catch (error) { console.error('Error:', error); } }; return (
 First Assessment
 Subsequent Opinion